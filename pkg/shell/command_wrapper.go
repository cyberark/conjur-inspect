package shell

import (
	"bytes"
	"os/exec"
)

// CommandWrapper represents a wrapper around an executable command
type CommandWrapper struct {
	name string
	args []string
}

// NewCommandWrapper creates a new CommandWrapper with the provided name and args.
// It returns a pointer to the created CommandWrapper.
func NewCommandWrapper(name string, args ...string) *CommandWrapper {
	return &CommandWrapper{
		name: name,
		args: args,
	}
}

// Run executes the command and returns its output as arrays
// of bytes representing stdout and stderr, along with any error that occurred.
// It returns three values, which are based on the results of the command execution:
// stdout []byte: The standard output generated by the command.
// stderr []byte: The standard error generated by the command.
// err error: An error, if one occurred while executing the command.
func (wrapper *CommandWrapper) Run() (stdout, stderr []byte, err error) {
	var outBuffer, errBuffer bytes.Buffer

	cmdPath, err := exec.LookPath(wrapper.name)
	if err != nil {
		return outBuffer.Bytes(), errBuffer.Bytes(), err
	}

	exec := exec.Command(cmdPath, wrapper.args...)

	exec.Stdout = &outBuffer
	exec.Stderr = &errBuffer

	err = exec.Run() // and wait

	return outBuffer.Bytes(), errBuffer.Bytes(), err
}
